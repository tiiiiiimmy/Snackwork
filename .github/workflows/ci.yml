name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Backend CI/CD
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: snackspot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: true
    
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore src/backend/SnackSpotAuckland.Tests/SnackSpotAuckland.Tests.csproj
    
    - name: Build backend
      run: dotnet build src/backend/SnackSpotAuckland.Tests/SnackSpotAuckland.Tests.csproj --no-restore --configuration Release
    
    - name: Run backend tests
      run: dotnet test src/backend/SnackSpotAuckland.Tests/SnackSpotAuckland.Tests.csproj --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=snackspot_test;Username=testuser;Password=testpass"
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
    
    - name: Security scan - .NET
      run: |
        dotnet list src/backend/SnackSpotAuckland.Api/SnackSpotAuckland.Api.csproj package --vulnerable --include-transitive || echo "No vulnerabilities found"

  # Frontend CI/CD
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: src/frontend
    
    - name: Lint frontend
      run: npm run lint
      working-directory: src/frontend
    
    - name: Type check
      run: npx tsc --noEmit
      working-directory: src/frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: src/frontend
    
    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false
      working-directory: src/frontend
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: src/frontend/coverage
        flags: frontend
        name: frontend-coverage
    
    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      working-directory: src/frontend
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      continue-on-error: true
    
    - name: Security scan - npm
      run: npm audit --audit-level=high
      working-directory: src/frontend
      continue-on-error: true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/dist/
        retention-days: 30

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: snackspot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
    
    - name: Start backend
      run: |
        dotnet restore src/backend/SnackSpotAuckland.Api/SnackSpotAuckland.Api.csproj
        dotnet build src/backend/SnackSpotAuckland.Api/SnackSpotAuckland.Api.csproj --no-restore
        dotnet run --project src/backend/SnackSpotAuckland.Api/SnackSpotAuckland.Api.csproj &
        sleep 30
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=snackspot_test;Username=testuser;Password=testpass"
        ASPNETCORE_ENVIRONMENT: Development
    
    - name: Build frontend
      run: |
        npm ci
        npm run build
      working-directory: src/frontend
    
    - name: Run E2E tests
      run: |
        npm run test:e2e
      working-directory: src/frontend
      continue-on-error: true

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/dist/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: Azure App Service, AWS, etc.
    
    - name: Health check
      run: |
        echo "Running health checks..."
        # Add health check commands here
        # curl -f https://staging-api.snackspot.co.nz/health || exit 1
    
    - name: Notify deployment
      run: |
        echo "Deployment to staging completed successfully"
        # Add notification logic here (Slack, Teams, etc.)